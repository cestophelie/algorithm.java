package algorithms;

import java.util.Stack;

public class validParentheses { 
	public static boolean isValid(String s) {
		// 1. if a character is among '(', '[', '{' -> stack push
		// 2. if a character is among ')', ']', '}' && stack is not empty && top of the
		// stack is the matching bracket -> pop
		// 3. if there are remaining brackets after the linear pop and push process O(N)
		// -> return false
		// 4. else -> return true

		// extra cases : {[]} --> true case, ([)] --> false case. so the stack approach

		int len = s.length();
		Stack<Character> stk = new Stack<>();
		Character chr = 0;

		for (int i = 0; i < len; i++) {
			chr = s.charAt(i);
			if (chr == '(') {
				stk.push(chr);
			} else if (chr == '[') {
				stk.push(chr);
			} else if (chr == '{') {
				stk.push(chr);
			} else {
				if (stk.empty()) {
					return false;
				} else if (stk.peek() == '(' && chr == ')') {
					stk.pop();
				} else if (stk.peek() == '[' && chr == ']') {
					stk.pop();
				} else if (stk.peek() == '{' && chr == '}') {
					stk.pop();
				} else {
					return false;
				}
				
			}
		}
		/* 1) Optimized
		 * if (stk.empty()) {
			return true;
		} else {
			return false;
		}*/
		return stk.isEmpty();

	}

	public static void main(String[] args) {
		boolean result;
		result = isValid("{[]}");
		System.out.println(result);
	}

}
